// Generated by gencpp from file hexapodservice/hexapodserviceResult.msg
// DO NOT EDIT!


#ifndef HEXAPODSERVICE_MESSAGE_HEXAPODSERVICERESULT_H
#define HEXAPODSERVICE_MESSAGE_HEXAPODSERVICERESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hexapodservice
{
template <class ContainerAllocator>
struct hexapodserviceResult_
{
  typedef hexapodserviceResult_<ContainerAllocator> Type;

  hexapodserviceResult_()
    : position_fdbk()
    , result()
    , status(0)  {
      position_fdbk.assign(0.0);
  }
  hexapodserviceResult_(const ContainerAllocator& _alloc)
    : position_fdbk()
    , result(_alloc)
    , status(0)  {
  (void)_alloc;
      position_fdbk.assign(0.0);
  }



   typedef boost::array<double, 4>  _position_fdbk_type;
  _position_fdbk_type position_fdbk;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _result_type;
  _result_type result;

   typedef int32_t _status_type;
  _status_type status;




  typedef boost::shared_ptr< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> const> ConstPtr;

}; // struct hexapodserviceResult_

typedef ::hexapodservice::hexapodserviceResult_<std::allocator<void> > hexapodserviceResult;

typedef boost::shared_ptr< ::hexapodservice::hexapodserviceResult > hexapodserviceResultPtr;
typedef boost::shared_ptr< ::hexapodservice::hexapodserviceResult const> hexapodserviceResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hexapodservice::hexapodserviceResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace hexapodservice

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'hexapodservice': ['/home/quan/hexapod_service_ws/src/hexapodservice/msg', '/home/quan/hexapod_service_ws/src/hexapodservice/devel/share/hexapodservice/msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8548628fbde6117d999a4f664d66ed4f";
  }

  static const char* value(const ::hexapodservice::hexapodserviceResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8548628fbde6117dULL;
  static const uint64_t static_value2 = 0x999a4f664d66ed4fULL;
};

template<class ContainerAllocator>
struct DataType< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hexapodservice/hexapodserviceResult";
  }

  static const char* value(const ::hexapodservice::hexapodserviceResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
float64[4] position_fdbk\n\
string result\n\
int32 status\n\
";
  }

  static const char* value(const ::hexapodservice::hexapodserviceResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_fdbk);
      stream.next(m.result);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct hexapodserviceResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hexapodservice::hexapodserviceResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hexapodservice::hexapodserviceResult_<ContainerAllocator>& v)
  {
    s << indent << "position_fdbk[]" << std::endl;
    for (size_t i = 0; i < v.position_fdbk.size(); ++i)
    {
      s << indent << "  position_fdbk[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_fdbk[i]);
    }
    s << indent << "result: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.result);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HEXAPODSERVICE_MESSAGE_HEXAPODSERVICERESULT_H
